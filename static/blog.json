[{"meta":{"Title":"Migrated to Jekyll","Date":"2014-01-14T00:00:00.000Z","slug":"migrated-to-jekyll"},"html":"<p>I migrated my blog to <a href=\"http://jekyllrb.com/\">Jekyll</a> yesterday. It was pretty easy since I didn&#39;t have that many posts.</p>\n<p>Jekyll makes managing my site incredibly easy by compiling text files into a directory containing a static website, and is way more convenient than using a conventional content management system.</p>\n<p>My personal website/blog setup so far:\nI keep my site content on my VPS, and run this command within a screen session:</p>\n<pre><code>jekyll build --source /home/desmond/deslee-jekyll --destination /path/to/http/root --watch\n</code></pre><p>The <code>--watch</code> option tells Jekyll to watch for changes in any of my source files, and regenerate the destination files automatically.</p>\n<p>Next, I <a href=\"http://fuse.sourceforge.net/sshfs.html\">sshfs</a> my Jekyll source directory onto my home computer and open up the files in my text editor. When I save the files, the Jekyll process will generate the corresponding HTML files, and changes will appear on my site almost immediately.</p>\n<p>Here is the <a href=\"https://raw2.github.com/deslee/deslee-jekyll/master/_posts/2014-01-24-migrated-to-jekyll.md\">raw text data</a> of this blog post.</p>\n<p>Finally, I use Git with my Jekyll directory for revision control.</p>\n<p>This makes it much easier than logging into a cms backend, using a web based editor, and submitting my content to the server to be stored on a database.</p>\n<p>To read more about Jekyll, read what its creator has to say about it in his blog post, <a href=\"http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html\">Blogging Like a Hacker</a></p>\n"},{"meta":{"Title":"Learning how to use ReactJS and Firebase","Date":"2014-11-17T00:00:00.000Z","slug":"reactjs-and-firebase"},"html":"<h3 id=\"introduction\">Introduction</h3>\n<p>A few weeks ago, I experimented with Facebook&#39;s <a href=\"1\">ReactJS</a>. ReactJS is a tool for building user interfaces. The structure of a React application is similar to web components, where a UI is composed of multiple components. Each component and it&#39;s children can be rendered in HTML. ReactJS renders your components in a virtual DOM, which is compared to the existing DOM to intelligently apply DOM manipulations to your page.</p>\n<p><a href=\"2\">Firebase</a> is a real time key-value store. Using Firebase&#39;s Javascript API, the browser receives updates whenever something is changed on the server.</p>\n<p>Together, these two libraries are awesome.</p>\n<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/qaYESiT-358\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h3 id=\"implementation\">Implementation</h3>\n<p>I had a CMS running on my server at the time, so I modified it to use Firebase and ReactJS. At a high level, it&#39;s very simple. I had a ReactJS component called a &quot;Renderable&quot; that queries the Firebase store to get the text, which is then compiled to HTML (if it is formatted in markdown). When Firebase receives an update from the server, an event is triggered that causes the &quot;Renderable&quot; to render again.</p>\n<h3 id=\"what-i-ve-learned\">What I&#39;ve learned</h3>\n<p>bla h blahb lah</p>\n"}]